trigger:
  - main

variables:
  BUILD_NUMBER: 0.1.$(Build.BuildId)
  DOCTL_URL: https://github.com/digitalocean/doctl/releases/download/v1.60.0/doctl-1.60.0-linux-amd64.tar.gz
  DOCKER_REGISTRY: 'registry.gitlab.com/mcc.test/mcc.test'
  DOCKER_USER: 'mcc.test'

stages:
  - stage: Build
    jobs:
      - job:
        pool:
          vmImage: ubuntu-latest

        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '14.x'
            displayName: 'Install Node.js'

          - task: UseDotNet@2
            inputs:
              packageType: 'sdk'
              version: '5.x'

          - script: |
              yarn config set network-timeout 300000 -g
            displayName: 'increase yarn install timeout'

          - task: Cache@2
            inputs:
              key: 'node_modules|root|$(Agent.OS)|./yarn.lock'
              path: $(Build.SourcesDirectory)/node_modules
              cacheHitVar: YARN_CACHE_RESTORED
            displayName: Cache npm packages
            continueOnError: true

          - script: |
              yarn --frozen-lockfile
            displayName: 'yarn install'

          - script: |
              cd webapi
              dotnet restore
            displayName: 'dotnet restore'

          - script: |
              npm --no-git-tag-version version $(BUILD_NUMBER) --allow-same-version
            displayName: 'set version'

          - script: |
              yarn build
            displayName: 'build'

          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/junit.xml'
              mergeTestResults: true

          #- task: PublishCodeCoverageResults@1
          #  displayName: 'Publish code coverage from Jest tests'
          #  inputs:
          #    codeCoverageTool: Cobertura
          #    summaryFileLocation: '**/cobertura-coverage.xml'
          #    failIfCoverageEmpty: true

          - script: |
              docker login $(DOCKER_REGISTRY) -u $(DOCKER_USER) -p $(DOCKER_TOKEN)
            displayName: 'Authenticate at Container Registry'

          - task: Docker@2
            condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
            inputs:
              repository: $(DOCKER_REGISTRY)
              command: 'buildAndPush'
              Dockerfile: './Dockerfile'
              buildContext: '$(Build.SourcesDirectory)/publish'
              tags: |
                $(BUILD_NUMBER)
                latest
            displayName: 'build and push version+latest'

          - task: Docker@2
            condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/main'))
            inputs:
              repository: $(DOCKER_REGISTRY)
              command: 'buildAndPush'
              Dockerfile: './Dockerfile'
              buildContext: '$(Build.SourcesDirectory)/publish'
              tags: |
                $(BUILD_NUMBER)
            displayName: 'build and push version only'

          - publish: './docker-compose.yaml'
            artifact: 'docker-compose'

          - publish: './nginx'
            artifact: 'nginx'

          - publish: './scripts/deploy'
            artifact: 'scripts'
  - stage: DeployToDev
    dependsOn:
      - Build
    variables:
      - template: ./.ci/_stages/_default.yml
      - template: ./.ci/_stages/dev.yml
    condition: succeeded()
    jobs:
      - job:
        pool:
          vmImage: ubuntu-latest
        steps:
          - template: ./.ci/azure-deploy-kubernetes.yml
            parameters:
              kubeconfig: ${{ variables.KUBECONFIG }}
              stage: 'dev'
